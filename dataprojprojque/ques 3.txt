ques 3

#include <stdio.h>
#include <stdlib.h>

// Structure for a node
struct Node {
    int data;
    struct Node* next;
};

// Function to add a new node at the end of the linked list
void addNode(struct Node** head, int data) {
    // Create a new node
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    // If the list is empty, make the new node as the head
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    // Traverse to the last node and append the new node
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

// Function to delete a node by location
void deleteNodeByLocation(struct Node** head, int position) {
    if (*head == NULL) {
        return;
    }

    struct Node* current = *head;

    // If the head node needs to be deleted
    if (position == 0) {
        *head = current->next;
        free(current);
        return;
    }

    // Find the previous node of the node to be deleted
    for (int i = 0; current != NULL && i < position - 1; i++) {
        current = current->next;
    }

    // If the position is more than the number of nodes
    if (current == NULL || current->next == NULL) {
        return;
    }

    struct Node* nextNode = current->next->next;
    free(current->next);
    current->next = nextNode;
}

// Function to delete all nodes containing a particular data value
void deleteNodesByValue(struct Node** head, int value) {
    struct Node* current = *head;
    struct Node* prev = NULL;

    // Traverse through the linked list
    while (current != NULL) {
        // If the current node contains the value, delete it
        if (current->data == value) {
            // If it's the head node, update the head
            if (prev == NULL) {
                *head = current->next;
            } else {
                prev->next = current->next;
            }
            struct Node* temp = current;
            current = current->next;
            free(temp);
        } else {
            prev = current;
            current = current->next;
        }
    }
}

// Function to delete the complete linked list
void deleteLinkedList(struct Node** head) {
    struct Node* current = *head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }

    *head = NULL;
}

// Function to display the linked list
void displayLinkedList(struct Node* head) {
    struct Node* current = head;

    if (current == NULL) {
        printf("Linked list is empty.\n");
        return;
    }

    printf("Linked list: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Function to display the inverted linked list
void displayInvertedLinkedList(struct Node* head) {
    if (head == NULL) {
        printf("Linked list is empty.\n");
        return;
    }

    if (head->next != NULL) {
        displayInvertedLinkedList(head->next);
    }

    printf("%d ", head->data);
}

// Function to calculate the total memory space occupied by the linked list
int calculateMemorySpace(struct Node* head) {
    struct Node* current = head;
    int count = 0;

    while (current != NULL) {
        count += sizeof(*current);
        current = current->next;
    }

    return count;
}

int main() {
    struct Node* head = NULL;

    // Add nodes to the linked list
    addNode(&head, 1);
    addNode(&head, 2);
    addNode(&head, 3);
    addNode(&head, 4);
    addNode(&head, 5);
    addNode(&head, 5);
    addNode(&head, 6);
    addNode(&head, 5);

    // Display the original linked list
    displayLinkedList(head);

    // Delete a node by location
    deleteNodeByLocation(&head, 3);

    // Display the modified linked list
    displayLinkedList(head);

    // Delete all nodes with value 5
    deleteNodesByValue(&head, 5);

    // Display the modified linked list
    displayLinkedList(head);

    // Delete the complete linked list
    deleteLinkedList(&head);

    // Display the linked list after deletion
    displayLinkedList(head);

    // Calculate memory space occupied by the linked list
    int memorySpace = calculateMemorySpace(head);
    printf("Total memory space occupied by the linked list: %d bytes\n", memorySpace);

    return 0;
}

